;; get list from launch
;; cat hoge.l | sed '/^#/d'| sed -e "s/      - x: //" | sed -e "s/        y: //" | sed -e "s/        theta: //" | xargs -n 3 | sed "s/\$/)/" | sed "s/^/(make-step /"

;; makunbound '*irtviewer*
(makunbound '*irtviewer*)
(send *irtviewer* :viewpoint #f(0 0 1500))

(defun make-step (x y theta)
  ;; (setq a (instance face :init :vertices '(#f(0.13 0.065 0) #f(-0.13 0.065 0) #f(-0.13 0.065 0)  #f(100 -100 0))))
  (setq b (make-coords :pos (scale 1e3 (float-vector x y 0)) :rpy (float-vector theta 0 0)))
  (setq foot-print (instance face :init :vertices (mapcar #'(lambda (vec) (send b :transform-vector (scale 1e3 vec))) '(#f(0.13 0.065 0) #f(-0.13 0.065 0) #f(-0.13 -0.065 0)  #f(0.13 -0.065 0)))))
  foot-print)

;; set steps
(setq steps (list #f(0 0 0)
                  #f(0 0.20 0)
                  #f(0 -0.10 0)
                  #f(0 -0.04 0)
                  #f(0 0.06 0)
                  #f(0 0.02 0)
                  #f(0.16 0 0)
                  #f(0.10 0 0)
                  #f(0.02 0 0)
                  #f(0.13 0 0)
                  #f(0.07 0 0)
                  #f(-0.10 0 0)
                  #f(-0.04 0 0)
                  #f(0 0 0.14)
                  #f(0 0 0.05)
                  #f(0 -0.06 0.19)
                  #f(0.10 0 0.14)
                  #f(0.04 0 0.09)
                  #f(0 0 -0.14)
                  #f(0 0 -0.05)
                  #f(0 -0.06 -0.19)
                  #f(0.10 0 -0.14)
                  #f(0.04 0 -0.09)
                  #f(-0.04 0 0.09)
                  #f(-0.04 0 -0.09)
                  #f(-0.10 0.04 0)
                  #f(-0.10 -0.04 0)
                  #f(0.10 0.04 0)
                  #f(0.10 -0.04 0)
                  #f(-0.07 -0.07 0)
                  #f(0.09 -0.08 0)
                  #f(-0.08 -0.08 -0.19)
                  #f(0.12 -0.08 0.19)
                  #f(0.14 -0.08 0)
                  #f(-0.08 0.03 0.19)
                  ))

;; draw faces for debug print in IRT viewer
(defun draw-steps (steps)
  (setq faces (list))
  (dotimes (i (length steps))
    (setq x (elt (elt steps i) 0))
    (setq y (elt (elt steps i) 1))
    (setq theta (elt (elt steps i) 2))
    (setq faces (nconc faces (list(make-step x y theta))))
    )
  (send-all faces :draw-on :flush t)
  )

;; print successors for footstep planner launch
(defun print-steps (steps)
  (dotimes (i (length steps))
    (setq x (elt (elt steps i) 0))
    (setq y (elt (elt steps i) 1))
    (setq theta (elt (elt steps i) 2))
    (format t "      - x: ~A~%" x)
    (format t "        y: ~A~%" y)
    (format t "        theta: ~A~%" theta)
    )
  )
